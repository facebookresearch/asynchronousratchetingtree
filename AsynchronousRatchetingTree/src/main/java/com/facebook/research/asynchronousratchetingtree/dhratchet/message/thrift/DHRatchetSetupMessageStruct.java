/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.facebook.research.asynchronousratchetingtree.dhratchet.message.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-01-05")
public class DHRatchetSetupMessageStruct implements org.apache.thrift.TBase<DHRatchetSetupMessageStruct, DHRatchetSetupMessageStruct._Fields>, java.io.Serializable, Cloneable, Comparable<DHRatchetSetupMessageStruct> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DHRatchetSetupMessageStruct");

  private static final org.apache.thrift.protocol.TField PEER_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("peerNum", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField IDENTITY_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("identityKey", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField EPHEMERAL_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("ephemeralKey", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new DHRatchetSetupMessageStructStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new DHRatchetSetupMessageStructTupleSchemeFactory();

  public int peerNum; // required
  public java.nio.ByteBuffer identityKey; // required
  public java.nio.ByteBuffer ephemeralKey; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PEER_NUM((short)1, "peerNum"),
    IDENTITY_KEY((short)2, "identityKey"),
    EPHEMERAL_KEY((short)3, "ephemeralKey");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PEER_NUM
          return PEER_NUM;
        case 2: // IDENTITY_KEY
          return IDENTITY_KEY;
        case 3: // EPHEMERAL_KEY
          return EPHEMERAL_KEY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PEERNUM_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PEER_NUM, new org.apache.thrift.meta_data.FieldMetaData("peerNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IDENTITY_KEY, new org.apache.thrift.meta_data.FieldMetaData("identityKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.EPHEMERAL_KEY, new org.apache.thrift.meta_data.FieldMetaData("ephemeralKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DHRatchetSetupMessageStruct.class, metaDataMap);
  }

  public DHRatchetSetupMessageStruct() {
  }

  public DHRatchetSetupMessageStruct(
    int peerNum,
    java.nio.ByteBuffer identityKey,
    java.nio.ByteBuffer ephemeralKey)
  {
    this();
    this.peerNum = peerNum;
    setPeerNumIsSet(true);
    this.identityKey = org.apache.thrift.TBaseHelper.copyBinary(identityKey);
    this.ephemeralKey = org.apache.thrift.TBaseHelper.copyBinary(ephemeralKey);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DHRatchetSetupMessageStruct(DHRatchetSetupMessageStruct other) {
    __isset_bitfield = other.__isset_bitfield;
    this.peerNum = other.peerNum;
    if (other.isSetIdentityKey()) {
      this.identityKey = org.apache.thrift.TBaseHelper.copyBinary(other.identityKey);
    }
    if (other.isSetEphemeralKey()) {
      this.ephemeralKey = org.apache.thrift.TBaseHelper.copyBinary(other.ephemeralKey);
    }
  }

  public DHRatchetSetupMessageStruct deepCopy() {
    return new DHRatchetSetupMessageStruct(this);
  }

  @Override
  public void clear() {
    setPeerNumIsSet(false);
    this.peerNum = 0;
    this.identityKey = null;
    this.ephemeralKey = null;
  }

  public int getPeerNum() {
    return this.peerNum;
  }

  public DHRatchetSetupMessageStruct setPeerNum(int peerNum) {
    this.peerNum = peerNum;
    setPeerNumIsSet(true);
    return this;
  }

  public void unsetPeerNum() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PEERNUM_ISSET_ID);
  }

  /** Returns true if field peerNum is set (has been assigned a value) and false otherwise */
  public boolean isSetPeerNum() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PEERNUM_ISSET_ID);
  }

  public void setPeerNumIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PEERNUM_ISSET_ID, value);
  }

  public byte[] getIdentityKey() {
    setIdentityKey(org.apache.thrift.TBaseHelper.rightSize(identityKey));
    return identityKey == null ? null : identityKey.array();
  }

  public java.nio.ByteBuffer bufferForIdentityKey() {
    return org.apache.thrift.TBaseHelper.copyBinary(identityKey);
  }

  public DHRatchetSetupMessageStruct setIdentityKey(byte[] identityKey) {
    this.identityKey = identityKey == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(identityKey.clone());
    return this;
  }

  public DHRatchetSetupMessageStruct setIdentityKey(java.nio.ByteBuffer identityKey) {
    this.identityKey = org.apache.thrift.TBaseHelper.copyBinary(identityKey);
    return this;
  }

  public void unsetIdentityKey() {
    this.identityKey = null;
  }

  /** Returns true if field identityKey is set (has been assigned a value) and false otherwise */
  public boolean isSetIdentityKey() {
    return this.identityKey != null;
  }

  public void setIdentityKeyIsSet(boolean value) {
    if (!value) {
      this.identityKey = null;
    }
  }

  public byte[] getEphemeralKey() {
    setEphemeralKey(org.apache.thrift.TBaseHelper.rightSize(ephemeralKey));
    return ephemeralKey == null ? null : ephemeralKey.array();
  }

  public java.nio.ByteBuffer bufferForEphemeralKey() {
    return org.apache.thrift.TBaseHelper.copyBinary(ephemeralKey);
  }

  public DHRatchetSetupMessageStruct setEphemeralKey(byte[] ephemeralKey) {
    this.ephemeralKey = ephemeralKey == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(ephemeralKey.clone());
    return this;
  }

  public DHRatchetSetupMessageStruct setEphemeralKey(java.nio.ByteBuffer ephemeralKey) {
    this.ephemeralKey = org.apache.thrift.TBaseHelper.copyBinary(ephemeralKey);
    return this;
  }

  public void unsetEphemeralKey() {
    this.ephemeralKey = null;
  }

  /** Returns true if field ephemeralKey is set (has been assigned a value) and false otherwise */
  public boolean isSetEphemeralKey() {
    return this.ephemeralKey != null;
  }

  public void setEphemeralKeyIsSet(boolean value) {
    if (!value) {
      this.ephemeralKey = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case PEER_NUM:
      if (value == null) {
        unsetPeerNum();
      } else {
        setPeerNum((java.lang.Integer)value);
      }
      break;

    case IDENTITY_KEY:
      if (value == null) {
        unsetIdentityKey();
      } else {
        if (value instanceof byte[]) {
          setIdentityKey((byte[])value);
        } else {
          setIdentityKey((java.nio.ByteBuffer)value);
        }
      }
      break;

    case EPHEMERAL_KEY:
      if (value == null) {
        unsetEphemeralKey();
      } else {
        if (value instanceof byte[]) {
          setEphemeralKey((byte[])value);
        } else {
          setEphemeralKey((java.nio.ByteBuffer)value);
        }
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case PEER_NUM:
      return getPeerNum();

    case IDENTITY_KEY:
      return getIdentityKey();

    case EPHEMERAL_KEY:
      return getEphemeralKey();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case PEER_NUM:
      return isSetPeerNum();
    case IDENTITY_KEY:
      return isSetIdentityKey();
    case EPHEMERAL_KEY:
      return isSetEphemeralKey();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof DHRatchetSetupMessageStruct)
      return this.equals((DHRatchetSetupMessageStruct)that);
    return false;
  }

  public boolean equals(DHRatchetSetupMessageStruct that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_peerNum = true;
    boolean that_present_peerNum = true;
    if (this_present_peerNum || that_present_peerNum) {
      if (!(this_present_peerNum && that_present_peerNum))
        return false;
      if (this.peerNum != that.peerNum)
        return false;
    }

    boolean this_present_identityKey = true && this.isSetIdentityKey();
    boolean that_present_identityKey = true && that.isSetIdentityKey();
    if (this_present_identityKey || that_present_identityKey) {
      if (!(this_present_identityKey && that_present_identityKey))
        return false;
      if (!this.identityKey.equals(that.identityKey))
        return false;
    }

    boolean this_present_ephemeralKey = true && this.isSetEphemeralKey();
    boolean that_present_ephemeralKey = true && that.isSetEphemeralKey();
    if (this_present_ephemeralKey || that_present_ephemeralKey) {
      if (!(this_present_ephemeralKey && that_present_ephemeralKey))
        return false;
      if (!this.ephemeralKey.equals(that.ephemeralKey))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + peerNum;

    hashCode = hashCode * 8191 + ((isSetIdentityKey()) ? 131071 : 524287);
    if (isSetIdentityKey())
      hashCode = hashCode * 8191 + identityKey.hashCode();

    hashCode = hashCode * 8191 + ((isSetEphemeralKey()) ? 131071 : 524287);
    if (isSetEphemeralKey())
      hashCode = hashCode * 8191 + ephemeralKey.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(DHRatchetSetupMessageStruct other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetPeerNum()).compareTo(other.isSetPeerNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPeerNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.peerNum, other.peerNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIdentityKey()).compareTo(other.isSetIdentityKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdentityKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identityKey, other.identityKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEphemeralKey()).compareTo(other.isSetEphemeralKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEphemeralKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ephemeralKey, other.ephemeralKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("DHRatchetSetupMessageStruct(");
    boolean first = true;

    sb.append("peerNum:");
    sb.append(this.peerNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("identityKey:");
    if (this.identityKey == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.identityKey, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ephemeralKey:");
    if (this.ephemeralKey == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.ephemeralKey, sb);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DHRatchetSetupMessageStructStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DHRatchetSetupMessageStructStandardScheme getScheme() {
      return new DHRatchetSetupMessageStructStandardScheme();
    }
  }

  private static class DHRatchetSetupMessageStructStandardScheme extends org.apache.thrift.scheme.StandardScheme<DHRatchetSetupMessageStruct> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DHRatchetSetupMessageStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PEER_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.peerNum = iprot.readI32();
              struct.setPeerNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IDENTITY_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.identityKey = iprot.readBinary();
              struct.setIdentityKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EPHEMERAL_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ephemeralKey = iprot.readBinary();
              struct.setEphemeralKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DHRatchetSetupMessageStruct struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PEER_NUM_FIELD_DESC);
      oprot.writeI32(struct.peerNum);
      oprot.writeFieldEnd();
      if (struct.identityKey != null) {
        oprot.writeFieldBegin(IDENTITY_KEY_FIELD_DESC);
        oprot.writeBinary(struct.identityKey);
        oprot.writeFieldEnd();
      }
      if (struct.ephemeralKey != null) {
        oprot.writeFieldBegin(EPHEMERAL_KEY_FIELD_DESC);
        oprot.writeBinary(struct.ephemeralKey);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DHRatchetSetupMessageStructTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DHRatchetSetupMessageStructTupleScheme getScheme() {
      return new DHRatchetSetupMessageStructTupleScheme();
    }
  }

  private static class DHRatchetSetupMessageStructTupleScheme extends org.apache.thrift.scheme.TupleScheme<DHRatchetSetupMessageStruct> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DHRatchetSetupMessageStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetPeerNum()) {
        optionals.set(0);
      }
      if (struct.isSetIdentityKey()) {
        optionals.set(1);
      }
      if (struct.isSetEphemeralKey()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetPeerNum()) {
        oprot.writeI32(struct.peerNum);
      }
      if (struct.isSetIdentityKey()) {
        oprot.writeBinary(struct.identityKey);
      }
      if (struct.isSetEphemeralKey()) {
        oprot.writeBinary(struct.ephemeralKey);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DHRatchetSetupMessageStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.peerNum = iprot.readI32();
        struct.setPeerNumIsSet(true);
      }
      if (incoming.get(1)) {
        struct.identityKey = iprot.readBinary();
        struct.setIdentityKeyIsSet(true);
      }
      if (incoming.get(2)) {
        struct.ephemeralKey = iprot.readBinary();
        struct.setEphemeralKeyIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

