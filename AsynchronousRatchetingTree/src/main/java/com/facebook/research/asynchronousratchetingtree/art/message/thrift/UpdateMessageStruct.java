/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.facebook.research.asynchronousratchetingtree.art.message.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-01-05")
public class UpdateMessageStruct implements org.apache.thrift.TBase<UpdateMessageStruct, UpdateMessageStruct._Fields>, java.io.Serializable, Cloneable, Comparable<UpdateMessageStruct> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdateMessageStruct");

  private static final org.apache.thrift.protocol.TField LEAF_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("leafNum", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("path", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new UpdateMessageStructStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new UpdateMessageStructTupleSchemeFactory();

  public int leafNum; // required
  public java.util.List<java.lang.String> path; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LEAF_NUM((short)1, "leafNum"),
    PATH((short)2, "path");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LEAF_NUM
          return LEAF_NUM;
        case 2: // PATH
          return PATH;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LEAFNUM_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LEAF_NUM, new org.apache.thrift.meta_data.FieldMetaData("leafNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PATH, new org.apache.thrift.meta_data.FieldMetaData("path", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdateMessageStruct.class, metaDataMap);
  }

  public UpdateMessageStruct() {
  }

  public UpdateMessageStruct(
    int leafNum,
    java.util.List<java.lang.String> path)
  {
    this();
    this.leafNum = leafNum;
    setLeafNumIsSet(true);
    this.path = path;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UpdateMessageStruct(UpdateMessageStruct other) {
    __isset_bitfield = other.__isset_bitfield;
    this.leafNum = other.leafNum;
    if (other.isSetPath()) {
      java.util.List<java.lang.String> __this__path = new java.util.ArrayList<java.lang.String>(other.path);
      this.path = __this__path;
    }
  }

  public UpdateMessageStruct deepCopy() {
    return new UpdateMessageStruct(this);
  }

  @Override
  public void clear() {
    setLeafNumIsSet(false);
    this.leafNum = 0;
    this.path = null;
  }

  public int getLeafNum() {
    return this.leafNum;
  }

  public UpdateMessageStruct setLeafNum(int leafNum) {
    this.leafNum = leafNum;
    setLeafNumIsSet(true);
    return this;
  }

  public void unsetLeafNum() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LEAFNUM_ISSET_ID);
  }

  /** Returns true if field leafNum is set (has been assigned a value) and false otherwise */
  public boolean isSetLeafNum() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LEAFNUM_ISSET_ID);
  }

  public void setLeafNumIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LEAFNUM_ISSET_ID, value);
  }

  public int getPathSize() {
    return (this.path == null) ? 0 : this.path.size();
  }

  public java.util.Iterator<java.lang.String> getPathIterator() {
    return (this.path == null) ? null : this.path.iterator();
  }

  public void addToPath(java.lang.String elem) {
    if (this.path == null) {
      this.path = new java.util.ArrayList<java.lang.String>();
    }
    this.path.add(elem);
  }

  public java.util.List<java.lang.String> getPath() {
    return this.path;
  }

  public UpdateMessageStruct setPath(java.util.List<java.lang.String> path) {
    this.path = path;
    return this;
  }

  public void unsetPath() {
    this.path = null;
  }

  /** Returns true if field path is set (has been assigned a value) and false otherwise */
  public boolean isSetPath() {
    return this.path != null;
  }

  public void setPathIsSet(boolean value) {
    if (!value) {
      this.path = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case LEAF_NUM:
      if (value == null) {
        unsetLeafNum();
      } else {
        setLeafNum((java.lang.Integer)value);
      }
      break;

    case PATH:
      if (value == null) {
        unsetPath();
      } else {
        setPath((java.util.List<java.lang.String>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case LEAF_NUM:
      return getLeafNum();

    case PATH:
      return getPath();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case LEAF_NUM:
      return isSetLeafNum();
    case PATH:
      return isSetPath();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof UpdateMessageStruct)
      return this.equals((UpdateMessageStruct)that);
    return false;
  }

  public boolean equals(UpdateMessageStruct that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_leafNum = true;
    boolean that_present_leafNum = true;
    if (this_present_leafNum || that_present_leafNum) {
      if (!(this_present_leafNum && that_present_leafNum))
        return false;
      if (this.leafNum != that.leafNum)
        return false;
    }

    boolean this_present_path = true && this.isSetPath();
    boolean that_present_path = true && that.isSetPath();
    if (this_present_path || that_present_path) {
      if (!(this_present_path && that_present_path))
        return false;
      if (!this.path.equals(that.path))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + leafNum;

    hashCode = hashCode * 8191 + ((isSetPath()) ? 131071 : 524287);
    if (isSetPath())
      hashCode = hashCode * 8191 + path.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(UpdateMessageStruct other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetLeafNum()).compareTo(other.isSetLeafNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLeafNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.leafNum, other.leafNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPath()).compareTo(other.isSetPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.path, other.path);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("UpdateMessageStruct(");
    boolean first = true;

    sb.append("leafNum:");
    sb.append(this.leafNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("path:");
    if (this.path == null) {
      sb.append("null");
    } else {
      sb.append(this.path);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UpdateMessageStructStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public UpdateMessageStructStandardScheme getScheme() {
      return new UpdateMessageStructStandardScheme();
    }
  }

  private static class UpdateMessageStructStandardScheme extends org.apache.thrift.scheme.StandardScheme<UpdateMessageStruct> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UpdateMessageStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LEAF_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.leafNum = iprot.readI32();
              struct.setLeafNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list18 = iprot.readListBegin();
                struct.path = new java.util.ArrayList<java.lang.String>(_list18.size);
                java.lang.String _elem19;
                for (int _i20 = 0; _i20 < _list18.size; ++_i20)
                {
                  _elem19 = iprot.readString();
                  struct.path.add(_elem19);
                }
                iprot.readListEnd();
              }
              struct.setPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UpdateMessageStruct struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(LEAF_NUM_FIELD_DESC);
      oprot.writeI32(struct.leafNum);
      oprot.writeFieldEnd();
      if (struct.path != null) {
        oprot.writeFieldBegin(PATH_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.path.size()));
          for (java.lang.String _iter21 : struct.path)
          {
            oprot.writeString(_iter21);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UpdateMessageStructTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public UpdateMessageStructTupleScheme getScheme() {
      return new UpdateMessageStructTupleScheme();
    }
  }

  private static class UpdateMessageStructTupleScheme extends org.apache.thrift.scheme.TupleScheme<UpdateMessageStruct> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UpdateMessageStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetLeafNum()) {
        optionals.set(0);
      }
      if (struct.isSetPath()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetLeafNum()) {
        oprot.writeI32(struct.leafNum);
      }
      if (struct.isSetPath()) {
        {
          oprot.writeI32(struct.path.size());
          for (java.lang.String _iter22 : struct.path)
          {
            oprot.writeString(_iter22);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UpdateMessageStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.leafNum = iprot.readI32();
        struct.setLeafNumIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list23 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.path = new java.util.ArrayList<java.lang.String>(_list23.size);
          java.lang.String _elem24;
          for (int _i25 = 0; _i25 < _list23.size; ++_i25)
          {
            _elem24 = iprot.readString();
            struct.path.add(_elem24);
          }
        }
        struct.setPathIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

